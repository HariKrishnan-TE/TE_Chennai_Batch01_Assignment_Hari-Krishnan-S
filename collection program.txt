//Array to linked//
package com.te.collections;

import java.util.ArrayList;
import java.util.LinkedList;

public class ArrayToLinked {
public static void main(String[] args) {
		
		ArrayList<Integer> ref = new ArrayList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		
		System.out.println(ref);
		
		LinkedList<Integer> li=new LinkedList<Integer>(ref);//converting to Linked List
		
		System.out.println(li);//

	}

}


//copy//
package com.te.collections;

import java.util.ArrayList;
import java.util.Iterator;

public class Copy implements Cloneable {
public static void main(String[] args) {
		
		ArrayList<Integer> ref = new ArrayList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		ref.add(23);
		ref.add(16);
		ref.add(114);
		ref.add(15);

		 ArrayList<Integer> ref1=ref;// by shallow copy
		 
		 ArrayList<Integer> obj=( ArrayList<Integer>) ref.clone();//by clone method
		 
		 ArrayList<Integer> ref2=new ArrayList(ref);//by directly passing to the constructor
		 
		 System.out.println(ref2);
		 
		 System.out.println(obj);
		 
		 Iterator<Integer> itr=ref.iterator();
		 Iterator<Integer> itr1=ref1.iterator();
		 Iterator<Integer> itr2=obj.iterator();
		 
		 for (Integer integer : obj) {
			System.out.print(integer+" ");
		}
		 
		 System.out.println();
		 
		 for (Integer integer1 : ref) {
			System.out.print(integer1+" "); 
		 }
		 
		 System.out.println();
		 
		 for (Integer integer2 : ref1) {
			 System.out.print(integer2+" ");
		 }
		 
		 
		 
		 

	}

}

//occurence//
package com.te.collections;

import java.util.LinkedList;

public class Occurence {
public static void main(String[] args) {
		
		LinkedList<Integer> ref = new LinkedList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		ref.add(23);
		ref.add(16);
		ref.add(114);
		ref.add(15);
		
		System.out.println("=========list values==========");
		System.out.println(ref);
		
		System.out.println("=====first and last occurences");
		Object s1=ref.getFirst();
		Object s2=ref.getLast();
        
		System.out.println("first element "+" "+s1);
		System.out.println("last element "+" "+s2);

	}

}

//removing duplicates//
package com.te.collections;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class RemovingDuplicates {
public static void main(String[] args) {
		
		ArrayList<Integer> ref = new ArrayList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		ref.add(11);
		ref.add(25);
		ref.add(45);
		ref.add(30);
		
		//converting to LinkedHashSet using stream API
	    Set<Integer> s1=ref.stream().map(x->x).collect(Collectors.toCollection(LinkedHashSet::new));
	    
	    System.out.println("after removing duplicates ");
	    System.out.println(s1);

	}

}

//retrive first element//
package com.te.collections;

import java.util.LinkedList;

public class RetriveFirstElement {
public static void main(String[] args) {
		
		LinkedList<Integer> ref = new LinkedList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		
		Integer s1=ref.peekFirst();//only wrapper class supports,only LinkedList should be used since this comes from Deque
		
		System.out.println(ref);
		System.out.println("==========after retrieving============");
		System.out.println(s1);
	}

}

//specified position//
package com.te.collections;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class SpecifiedPosition {
	public static void main(String[] args) {

		List<Integer> ref = new LinkedList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);
		
		Iterator<Integer> itr=ref.listIterator(1);//starting from index 1 (we can write 2 for second and so on
		while(itr.hasNext()) {
			System.out.print(itr.next()+" ");
		}
}


}

//swap//
package com.te.collections;

import java.util.ArrayList;
import java.util.Collections;

public class Swap {
	public static void main(String[] args) {

		ArrayList<Integer> ref = new ArrayList();

		ref.add(11);
		ref.add(12);
		ref.add(10);
		ref.add(12);
		ref.add(57);

		System.out.println("Before Swap the ArrayList ");
		System.out.println(ref);

		Collections.swap(ref, 0,1);
		System.out.println("After Swapping the ArrayList ");
		System.out.println(ref);

	}


}
